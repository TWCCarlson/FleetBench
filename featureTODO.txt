- Agent resource tracking
- Simulation definition menu
- Dynamic text representing valid task/agent creation option
- Migrate .grid() col and row IDs to be dictionaried with weights
    Removing magic numbers
- Remove magic numbers in general
- Main canvas maybe needs numbering for nodes?
- Add status and a corresponding image to agents and tasks in treeviews
- Track whether work needs to be saved, fix save button behavior when no session active
- Re-examine how the rng seed value is set
- Pruning pass on functions
- - When this is done, also implement logging for debug
- possibly refactor the larger classes like toolBar into smaller packages
- Simulation setting for whether picking up an item takes a 'turn' or if just touching the node counts as dropping off or picking up an item
- Unify usage of dropoff vs deposit
- stupid tkinter problem: can't execute self.parent.mainView.mainCanvas.clearHighlight() in contextview handleAgentSelect without deathloop
- Unify usage of name/ID/numID


The graph datastructure should probably contain as much information as possible
The redraw/validation loop should probably rely on the graph as much as possible, with exceptions for application state semaphores
    This should be decoupled from the functional code and called after every change

Informational Classes are then:
    mapData
    agentData
    taskData
    statisticsData

Functional element Classes are then:
    commandBar - file, etc
    toolBar - the left pane
    infoBox - top bar with highlight info and layer visibilities
    mainView - central pane with graph render
    contextView - right hand pane

Graph structure:
    node data holds almost everything
    <Node Name> : <Node Data>
    '(A, B)': {
        'pos': {X: A, Y: B},
        'type': <'Node type'>,
        'edgeDirs': {'N': <0/1>, 'W': <0/1>, 'S': <0/1>, 'E': <0/1>},
        'agent': <Agent Object>
        'task': <Task Object>
    }
    maybe include 'reservations': {AgentID: weight/how many turns/etc}