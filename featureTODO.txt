- Agent resource tracking
- Simulation definition menu
- Dynamic text representing valid task/agent creation option
- Migrate .grid() col and row IDs to be dictionaried with weights
    Removing magic numbers
- Remove magic numbers in general
- Main canvas maybe needs numbering for nodes?
- Add status and a corresponding image to agents and tasks in treeviews
- Track whether work needs to be saved, fix save button behavior when no session active
- Re-examine how the rng seed value is set
- Pruning pass on functions
- - When this is done, also implement logging for debug
- possibly refactor the larger classes like toolBar into smaller packages
- Simulation setting for whether picking up an item takes a 'turn' or if just touching the node counts as dropping off or picking up an item
- Unify usage of dropoff vs deposit
- stupid tkinter problem: can't execute self.parent.mainView.mainCanvas.clearHighlight() in contextview handleAgentSelect without deathloop
- Unify usage of name/ID/numID
- Remove print statements, use highly verbose logging
- Allow agent creation with an empty name field, agentmanager will autogenerate a name
- updating agents removes every agent every time, might be better to check if an agent exists and not touch it
- clearAgentCreationUI() probably shouldn't also reset flow control booleans
- validateAgentPlacement has unnecessary guard clauses in numeric checks. Not possible to reach this code with non-numeric position values
- logging for earlier modules in the load order should get redone some day
- make code more portable by moving references to other classes to functions and passing references to functions
- Make ui clearing functions accept the target frame to make code more DRY
- There are two ways selecting an agent is being handled, unify it into one method
    One for treeView clicks and one for mainCanvas clicks, make it a method in the agent itself
- Agent managed assignment should enforce 1 agent per task and warn the user if task is already assigned to an agent
    Same for task management
- Might want to change the currenTask/assignee values to be IDs instead of object references
    However this is mightily convenient for not having to search dicts for values->keys later
- Font styling pass in the future (AFTER IT WORKS)
- add task icon to tiles in the mapgraph?
- movement validity checks need to consider that all agents move 'at once' even though the list may be iterated over
- selecting agent on the map does not highlight assigned task locationsâ€”feature or bug?
- simulation needs rng machine
- loading a save with identical data conflicts with what exists, write clear all data when loading
- bug: you can scroll the canvas even when the map is small enoguh to not need scrolling
- bug: task/agent placement spinboxes allow entries outside the map, which hightlights, but the task cannot be placed so this is safe currently

The graph datastructure should probably contain as much information as possible
The redraw/validation loop should probably rely on the graph as much as possible, with exceptions for application state semaphores
    This should be decoupled from the functional code and called after every change

Informational Classes are then:
    mapData
    agentData
    taskData
    statisticsData

Functional element Classes are then:
    commandBar - file, etc
    toolBar - the left pane
    infoBox - top bar with highlight info and layer visibilities
    mainView - central pane with graph render
    contextView - right hand pane

Graph structure:
    node data holds almost everything
    <Node Name> : <Node Data>
    '(A, B)': {
        'pos': {X: A, Y: B},
        'type': <'Node type'>,
        'edgeDirs': {'N': <0/1>, 'W': <0/1>, 'S': <0/1>, 'E': <0/1>},
        'agent': <Agent Object>
        'task': <Task Object>
    }




Does simulation deserve its own window?
 + Clean interface
 + Fresh datastructure
 + Decomplicates the programming slightly
 - Probably need a new canvas setup, takes time to create
 - Diminshes the usefulness of the main screen
 - + Relegate main screen to an 'edit screen'? It can still render and modify things. Could be useful for adjusting a simulation.
 + Frees up UI space to render more, and more relevant information
 - Needs new graphics, takes time
 - All methods needed are already written, tbh, wastes all that effort
 - + But they are sort of convoluted and may slow down simulation

 All the cons seem to be "takes more time"
 The pros seem to be genuinely useful

 Decision: make a new window

 Use a simplified canvas UI (same techniques, simpler graphics)
 Use the same graph datastrcuture (it's pretty small in memory, but keep tabs on other ways to store it)
 Overlays for planned movements and how the algorithm is thinking (thus depends on which algo is selected for the simulation)
 Live algorithm switching? (which one is better for this instance?)
 Statistics and reporting should get their own window, probably
 Live agent/task representation? Green for task done, yellow for agent busy, etc.?
 Ability to export the current "situation" directly back to the main program window for editing (ship over the graph and task/agent lists)
 Replay mode needs buttons and a way to scroll around the timeline

Simulation structure
 Check for selected algorithm
 Feed algorithm all the simulation state information
 - Iterate over agents, top->bottom? bottom->top? some kind of adaptive technique? short distances to go first? long first?
 Collect algorithm Orders
 Validate any interactions
 - Pickup, dropoff, resting, task completion
 Record the history for replay
 Render the new state
 - Update statistics

Configuration Options list
 Algorithm to be used in simulation
 Agents can share same node
 Pickup and dropoff are independent 'turn' actions?
 Rate at which tasks are generated
 